definitions:
  dtos.CreateCompanyDto:
    properties:
      avatar:
        type: string
      description:
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  dtos.CreateReviewCompanyDto:
    properties:
      creator_username:
        type: string
      header:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      service_id:
        type: integer
      text:
        type: string
    required:
    - creator_username
    - rating
    - service_id
    type: object
  dtos.CreateReviewServiceDto:
    properties:
      creator_username:
        type: string
      header:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      service_id:
        type: integer
      text:
        type: string
    required:
    - creator_username
    - rating
    - service_id
    type: object
  dtos.CreateServiceDto:
    properties:
      company_id:
        type: integer
      price:
        type: number
      service_type_id:
        type: integer
      text:
        type: string
    required:
    - company_id
    - price
    - service_type_id
    - text
    type: object
  dtos.CreateServiceTypeDto:
    properties:
      name:
        maxLength: 50
        minLength: 1
        type: string
    required:
    - name
    type: object
  dtos.CreateTagDto:
    properties:
      name:
        maxLength: 50
        minLength: 1
        type: string
    required:
    - name
    type: object
  dtos.CreateUserDto:
    properties:
      first_name:
        maxLength: 50
        type: string
      password:
        maxLength: 32
        minLength: 3
        type: string
      role:
        description: '"user"/"admin"'
        enum:
        - user
        - admin
        type: string
      second_name:
        maxLength: 50
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - first_name
    - password
    - role
    - second_name
    - username
    type: object
  dtos.ModifyUserDto:
    properties:
      avatar:
        type: string
      first_name:
        maxLength: 50
        type: string
      new_password:
        maxLength: 32
        minLength: 3
        type: string
      old_password:
        maxLength: 32
        minLength: 3
        type: string
      second_name:
        maxLength: 50
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - first_name
    - new_password
    - old_password
    - second_name
    - username
    type: object
  dtos.UserDto:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: API for managing users
  title: Account API
  version: "1.0"
paths:
  /account/delete:
    delete:
      consumes:
      - application/json
      description: Delete user by token data
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete user by token data
      tags:
      - Users
  /account/info:
    get:
      consumes:
      - application/json
      description: Get user data by token
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get user data by token
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Get user token data
      parameters:
      - description: User dto for modify user
        in: body
        name: ModifyUserDto
        required: true
        schema:
          $ref: '#/definitions/dtos.ModifyUserDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Get user token data
      tags:
      - Users
  /account/login:
    post:
      consumes:
      - application/json
      description: login in api
      parameters:
      - description: User  dto for login in
        in: body
        name: userDto
        required: true
        schema:
          $ref: '#/definitions/dtos.UserDto'
      produces:
      - application/json
      responses: {}
      summary: Login for user
      tags:
      - Authorization
  /account/register:
    post:
      consumes:
      - application/json
      description: Register in api
      parameters:
      - description: Create user dto for register in
        in: body
        name: createUserDto
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserDto'
      produces:
      - application/json
      responses: {}
      summary: Register for user
      tags:
      - Authorization
  /company:
    post:
      consumes:
      - application/json
      description: Create company
      parameters:
      - description: Create company dto
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateCompanyDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create company
      tags:
      - Company
  /company/{company_id}/service/{service_id}:
    get:
      consumes:
      - application/json
      description: Delete services
      parameters:
      - description: service id
        in: path
        name: service_id
        required: true
        type: integer
      - description: company id
        in: path
        name: company_id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete services
      tags:
      - Company
      - Service
  /company/{id}:
    get:
      consumes:
      - application/json
      description: Create company
      parameters:
      - description: company id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Create company
      tags:
      - Company
  /company/{id}/services:
    get:
      consumes:
      - application/json
      description: Get services
      parameters:
      - description: service id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get services
      tags:
      - Company
      - Service
  /company/review:
    post:
      consumes:
      - application/json
      description: Create company review
      parameters:
      - description: Create company review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateReviewCompanyDto'
      produces:
      - application/json
      responses: {}
      summary: Create company review
      tags:
      - Review
      - Company
  /company/review/{id}:
    delete:
      consumes:
      - application/json
      description: Delete company review
      parameters:
      - description: company id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete company review
      tags:
      - Review
      - Company
    get:
      consumes:
      - application/json
      description: Get company review
      parameters:
      - description: review id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get company review
      tags:
      - Review
      - Company
  /company/reviews/{id}:
    get:
      consumes:
      - application/json
      description: Get company reviews
      parameters:
      - description: company id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get company reviews
      tags:
      - Review
      - Company
  /service:
    post:
      consumes:
      - application/json
      description: Create service
      parameters:
      - description: Create service dto
        in: body
        name: serviceDto
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateServiceDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create service
      tags:
      - Service
  /service/review:
    post:
      consumes:
      - application/json
      description: Create service review
      parameters:
      - description: Create service review
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateReviewServiceDto'
      produces:
      - application/json
      responses: {}
      summary: Create service review
      tags:
      - Review
      - Service
  /service/review/{id}:
    delete:
      consumes:
      - application/json
      description: Delete service reviews
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete service reviews
      tags:
      - Review
      - Service
    get:
      consumes:
      - application/json
      description: Get service review
      parameters:
      - description: review id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get service review
      tags:
      - Review
      - Service
  /service/reviews/{id}:
    get:
      consumes:
      - application/json
      description: Get service reviews
      parameters:
      - description: service id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get service reviews
      tags:
      - Review
      - Service
  /servicetype:
    get:
      consumes:
      - application/json
      description: Get service types
      produces:
      - application/json
      responses: {}
      summary: Get service types
      tags:
      - ServiceType
    post:
      consumes:
      - application/json
      description: Create service type
      parameters:
      - description: Create service type
        in: body
        name: servicetype
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateServiceTypeDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create service type
      tags:
      - ServiceType
  /servicetype/{id}:
    delete:
      consumes:
      - application/json
      description: Delete service type
      parameters:
      - description: service type id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete service type
      tags:
      - ServiceType
    get:
      consumes:
      - application/json
      description: Get service type
      parameters:
      - description: service type id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get service type
      tags:
      - ServiceType
  /tag:
    post:
      consumes:
      - application/json
      description: Create tag
      parameters:
      - description: Create tag
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateTagDto'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Create Tag
      tags:
      - Tags
  /tag/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tag
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete Tag
      tags:
      - Tags
    get:
      consumes:
      - application/json
      description: Get tag
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Get Tag
      tags:
      - Tags
  /tags:
    get:
      consumes:
      - application/json
      description: Get tag
      produces:
      - application/json
      responses: {}
      summary: Get Tag
      tags:
      - Tags
  /users:
    get:
      consumes:
      - application/json
      description: Get users data
      produces:
      - application/json
      responses: {}
      summary: Get users data
      tags:
      - Users
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Get user data
      parameters:
      - description: User username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get user data
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: token
    type: apiKey
swagger: "2.0"
